import sys
#import asyncio  # 非同期処理用
import ipdb

from input_requirement import input_requirement as inp
from use_openai_api import (extract_amb as exam,  reconstruct_requirements as recon)

def_list, amb_list = create_question(amb_list)


amb_list = [[2, 0, '業務効率の向上を目指す', '具体的な業務効率の向上の指標や方法が示されていないから', 0, None], [3, 0, '何らかの改善を実現する', '「何らかの改善」が具体的に何を指すのか不明確だから', 1, None], [4, 0, 'ステークホルダーの期待に応える', 'ステークホルダーの具体的な期待が明示されていないから', 2, None], [0, 0, '戦略的意思決定支援のため、リアルタイムダッシュボードを提供', '「戦略的意思決定支援」が具体的に何を指すのかが不明確だから', 14, 2], [0, 17, 'レポート作成の時間を短縮', 'どの程度の時間短縮を目指しているのかが不 明確だから', 16, 3], [0, 0, 'レポート作成の時間を2024年７月末日比30%削減', '「レポート作成の時間」が具体的に何を指すのか不明確だか ら', 16, 4], [0, 13, '2024年７月末日比', '基準となる「2024年７月末日」の具体的な意味や条件が不明確だから', 17, 4], [6, 0, 'ユーザーフレンドリーなインターフェース', '「ユーザーフレンドリー」の具体的な基準が示されていないから', 3, None], [0, 0, '操作手順', '具体的にどの操作手順を指すのかが不明確だから', 18, 7], [0, 5, '最大3ステップ以内', '「ステップ」の定義が不明確で、何をもって1ステップとするのかが曖昧だから', 19, 7], [7, 0, 'セキュリティ対策の実施', 'どのようなセキュリティ対策を行うのか具体的に示されていないから', 4, None], [8, 0, '高速な処理性能', '「高速」の具体的な基準や測定方法が示されていないから', 5, None], [9, 0, '拡張性のある設計', '「拡 張性」の具体的な要件や基準が示されていないから', 6, None], [11, 4, '高い', '「高い」の具体的な数値や基準が示されていないから', 7, None], [12, 4, 'できるだけ安定', '「できるだけ安定」の具体的な基準や指標が示されていないから', 8, None], [0, 10, '月間1回未満', '「 月間1回未満」が具体的にどのような期間を指すのかが不明確だから', 21, 14], [13, 4, '十分な', '「十分な」の具体的な基準や指標が示され ていないから', 9, None], [14, 7, '将来的な成長に対応', 'どの程度の成長を見込んでいるのか具体的に示されていないから', 10, None], [16, 4, '適切な範囲内', '「適切な範囲内」の具体的な金額や基準が示されていないから', 11, None], [0, 12, '将来的なユーザー数およびデータ量の増加', '具体的にどの程度の増加を想定しているのかが不明確だから', 21, 18], [17, 4, '現実的な', '「現実的な」の具体的な期間や基準が示されていないから', 12, None], [18, 5, '最適な活用', '「最適な活用」の具体的な方法や基準が示されていないから', 13, None]]
def_list = [['定量的目標: 業務時間の30%削減を目指す', 0, 0], ['情報の一元管理によるデータ重複削減率: 90%以上', 1, 1], ['戦略的意思決定支援のため、リアルタイムダッシュボードを提供', 2, 2], ['データ収集・反映の自動化により、レポート作成の時間を短縮', 3, 14], ['レポート作成の時間を2024年７月末日比30%削減', 4, 16], ['レポート作成を書き始めてから書き上げるまでの時間', 5, 16, True], ['2024年７月末日の全社員のレポート作成にかかった時間比', 6, 17, True], ['操作手順は最大3ステップ以内で完了可能', 7, 3], ['全ての操作手順', 8, 18, True], ['マウスドラッグ、クリック、テキスト入力をそれぞれ１ステップとしたときの３ステップ以内', 9, 19], ['ユーザー認証: 二要素認証の導入', 10, 4], ['データ検索時間: 1秒以内', 11, 5, True], ['マイクロサービスアーキテクチャを採用', 12, 6], ['システム稼働率: 99.9%以上（年間ダウンタイム: 約8.76時間以下）', 13, 7, True], ['システム障害発生率: 月間1回未満', 14, 8], ['30日に1回未満', 15, 21], ['高負荷時のレス ポンスタイム: 最大5秒以内', 16, 9], ['将来的なユーザー数およびデータ量の増加（最大2倍）に対応できるシステム設計', 17, 10], ['将来的なユーザー数およびデータ量の増加（最大2倍）に対応できるシステム設計', 18, 11], ['総開発費用: 2,000万円以内（インフラ、運用、保守費 用を含む）', 19, 21, True], ['開発期間: 2024年10月1日～2025年3月31日（6ヶ月）', 20, 12, True], ['開発チーム構成:', 'プロジェクトマ ネージャー: 1名', 'SE: 2名', 'プログラマー: 3名', 'テスター: 2名', 21, 13, True]]
        
trans_list = [(dp[0], ap[2]) for ap in amb_list for dp in def_list if dp[2] == ap[4]]

lang_trans_list = [f"{ap}は{dp}という意味です。" for dp, ap in trans_list]

comp_req = recon(input_result, lang_trans_list)

print(comp_req)

with open("reconstruct_requrements", "w", encoding="utf-8") as file:
    file.writelines(comp_req)